
import datetime
import os
import subprocess
from pathlib import Path
import json
from controller import Supervisor, AnsiCodes, Node
import time

supervisor = Supervisor()
time_step = int(supervisor.getBasicTimeStep())

robot_translation = []
robot_translation.append(supervisor.getFromDef('BLUE_PLAYER_1').getField('translation'))
robot_translation.append(supervisor.getFromDef('RED_PLAYER_2').getField('translation'))
robot_translation.append(supervisor.getFromDef('GREAN_PLAYER_3').getField('translation'))

current_working_directory = Path.cwd()

def uprint(*text):
    with open(str(current_working_directory) + "\Sprint_log.txt",'a') as f:
        print(*text, file = f)
    print(*text )

os.chdir(current_working_directory.parent/'Robofest_TEAM')

role01 = 'sprint' 
second_pressed_button = '4'
initial_coord = ['[0.0, 0, 0]', '[0.0, 1.0, 0]', '[0.0, 2.0, 0]']
robot_color = ['blue', 'red', 'grean']
robot_number = ['1', '2', '3']
team_id = '-1'          # value -1 means game will be playing without Game Controller
port01 = ['7001', '7002', '7003']
params_name = ["Sprint_params1.json", "Sprint_params2.json", "Sprint_params3.json"]
for i in range(3):
    filename01 = "output" + f"{port01[i]}"+ ".txt"
    with open(filename01, "w") as f01:
        print(datetime.datetime.now(), file = f01)
        # p01 = subprocess.Popen(['python', 'main_pb.py', port01[i], team_id, robot_color[i], robot_number[i], role01, second_pressed_button, initial_coord[i], params_name[i]], stderr=f01)
        p01 = subprocess.Popen(['python', 'main_pb.py', port01[i], team_id, robot_color[i], robot_number[i], role01, second_pressed_button, initial_coord[i], params_name[i]], stderr=f01)


distance_count = 0

while supervisor.step(time_step) != -1 :
    #message = 'robot position: ' + str(robot_translation.getSFVec3f()) + 'step: ' + str(supervisor.step(time_step))
    #print(message)
    distance_count += 1
    y_coordinate = []
    for i in range(3):
        y_coordinate.append(robot_translation[i].getSFVec3f()[1])
        edge_1 = -0.5 + 1.05 * i
        edge_2 = 0.5 + 1.05 * i
        if y_coordinate[i] > edge_2 or y_coordinate[i] < edge_1:
            uprint(datetime.datetime.now(), 'robot ' + str(i+1) + ' ' + str(y_coordinate[i]) + ': distance was NOT finished due to failure ')
            # break
        if robot_translation[i].getSFVec3f()[0] > 3:
            uprint(datetime.datetime.now(), 'robot ' + str(i+1) + ' distance was finished within timesteps: ', distance_count)
            robot_translation[i].getSFVec3f()[0] = 0
            robot_translation[i].getSFVec3f()[1] = 0
            # break

p01.terminate()
supervisor.simulationReset()
supervisor.step(time_step)
supervisor.simulationSetMode(supervisor.SIMULATION_MODE_PAUSE)
#supervisor.worldReload()