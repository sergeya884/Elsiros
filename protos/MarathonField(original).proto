#VRML_SIM R2023b utf8
# license: Apache License 2.0
# license url: http://www.apache.org/licenses/LICENSE-2.0
# Field for Marathon competition.

EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/appearances/protos/Plastic.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/appearances/protos/Grass.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/appearances/protos/CarpetFibers.proto"

PROTO MarathonField [
  field SFVec3f                     translation 0 0 0
  field SFRotation                  rotation    0 1 0 0
  field SFString                    name        "marathon_field"
  field SFBool                      turfPhysics FALSE 
]
{

  %{

    LINE_WIDTH = 0.05 -- Line width
    BRANCH_LENGTH = 0.1 -- Length of one branch of the penalty/center mark (not specified in rules)
    N_VERTICES_CIRCLE = 36 -- Number of vertices for the regular polygon approximating the central circle (not specified in rules)

    A = 3.6
    B = 3.6
    C = 0.15
    D = 1.0
    E = 0.2
    F = 2.8
    G = 0.3
    H = 0.6
    I = 0.3
    J = G + 0.2
    K = F + 0.1
    L = 2.6

    if fields.turfPhysics.value then
      DEPTH = 0.01
    else
      DEPTH = 0
    end
    -- Points for a quarter field (except central circle)
    pts = {}
    pts[1]  = {x = 0,                           y = 0,                               z = DEPTH}
    pts[2]  = {x = 0,                           y = I,                               z = DEPTH}
    pts[3]  = {x = 0,                           y = I + (B / 2),                     z = DEPTH}
    pts[4]  = {x = I,                           y = I,                               z = DEPTH}
    pts[5]  = {x = I,                           y = I + (B / 2),                     z = DEPTH}
    pts[6]  = {x = I + LINE_WIDTH,              y = I,                               z = DEPTH}
    pts[7]  = {x = I + LINE_WIDTH,              y = I + LINE_WIDTH,                  z = DEPTH}
    pts[8]  = {x = I + LINE_WIDTH,              y = I + ((B - K) / 2),               z = DEPTH}
    pts[9]  = {x = I + LINE_WIDTH,              y = I + ((B - K) / 2) + LINE_WIDTH,  z = DEPTH}
    pts[10] = {x = I + LINE_WIDTH,              y = I + ((B - F) / 2),               z = DEPTH}
    pts[11] = {x = I + LINE_WIDTH,              y = I + ((B - F) / 2) + LINE_WIDTH,  z = DEPTH}
    pts[12] = {x = I + LINE_WIDTH,              y = I + (B / 2),                     z = DEPTH}
    pts[13] = {x = I + E - LINE_WIDTH,          y = I + ((B - F) / 2) + LINE_WIDTH,  z = DEPTH}
    pts[14] = {x = I + E - LINE_WIDTH,          y = I + (B / 2),                     z = DEPTH}
    pts[15] = {x = I + E,                       y = I + ((B - F) / 2),               z = DEPTH}
    pts[16] = {x = I + E,                       y = I + ((B - F) / 2) + LINE_WIDTH,  z = DEPTH}
    pts[17] = {x = I + E,                       y = I + (B / 2) - BRANCH_LENGTH,     z = DEPTH}
    pts[18] = {x = I + E,                       y = I + (B / 2),                     z = DEPTH}
    pts[19] = {x = I + G - BRANCH_LENGTH,       y = I + ((B - LINE_WIDTH) / 2),      z = DEPTH}
    pts[20] = {x = I + G - BRANCH_LENGTH,       y = I + (B / 2),                     z = DEPTH}
    pts[21] = {x = I + G - (LINE_WIDTH / 2),    y = I + (B / 2) - BRANCH_LENGTH,     z = DEPTH}
    pts[22] = {x = I + G - (LINE_WIDTH / 2),    y = I + ((B - LINE_WIDTH) / 2),      z = DEPTH}
    pts[23] = {x = I + G - (LINE_WIDTH / 2),    y = I + (B / 2),                     z = DEPTH}
    pts[24] = {x = I + G + (LINE_WIDTH / 2),    y = I + (B / 2) - BRANCH_LENGTH,     z = DEPTH}
    pts[25] = {x = I + G + (LINE_WIDTH / 2),    y = I + ((B - LINE_WIDTH) / 2),      z = DEPTH}
    pts[26] = {x = I + G + (LINE_WIDTH / 2),    y = I + (B / 2),                     z = DEPTH}
    pts[27] = {x = I + G + BRANCH_LENGTH,       y = I + ((B - LINE_WIDTH) / 2),      z = DEPTH}
    pts[28] = {x = I + G + BRANCH_LENGTH,       y = I + (B / 2),                     z = DEPTH}
    pts[29] = {x = I + J - LINE_WIDTH,          y = I + ((B - K) / 2) + LINE_WIDTH,  z = DEPTH}
    pts[30] = {x = I + J - LINE_WIDTH,          y = I + ((B - F) / 2),               z = DEPTH}
    pts[31] = {x = I + J - LINE_WIDTH,          y = I + (B / 2) - BRANCH_LENGTH,     z = DEPTH}
    pts[32] = {x = I + J - LINE_WIDTH,          y = I + (B / 2),                     z = DEPTH}
    pts[33] = {x = I + J,                       y = I + ((B - K) / 2),               z = DEPTH}
    pts[34] = {x = I + J,                       y = I + ((B - K) / 2) + LINE_WIDTH,  z = DEPTH}
    pts[35] = {x = I + J,                       y = I + (B / 2),                     z = DEPTH}
    pts[36] = {x = I + (A / 2) - BRANCH_LENGTH, y = I + ((B - LINE_WIDTH) / 2),      z = DEPTH}
    pts[37] = {x = I + (A / 2) - BRANCH_LENGTH, y = I + (B / 2),                     z = DEPTH}
    pts[38] = {x = I + ((A - LINE_WIDTH) / 2),  y = I,                               z = DEPTH}
    pts[39] = {x = I + ((A - LINE_WIDTH) / 2),  y = I + LINE_WIDTH,                  z = DEPTH}
    pts[40] = {x = I + ((A - LINE_WIDTH) / 2),  y = I + ((B - K) / 2),               z = DEPTH}
    pts[41] = {x = I + ((A - LINE_WIDTH) / 2),  y = I + ((B - LINE_WIDTH) / 2),      z = DEPTH}
    pts[42] = {x = I + ((A - LINE_WIDTH) / 2),  y = I + (B / 2),                     z = DEPTH}
    pts[43] = {x = I + (A / 2),                 y = 0,                               z = DEPTH}
    pts[44] = {x = I + (A / 2),                 y = I,                               z = DEPTH}
    pts[45] = {x = I + (A / 2),                 y = I + (B / 2),                     z = DEPTH}

    -- Triangles for a quarter field (except central circle)

    -- Triangles for Grass
    tg = {}

    tg[1]  = {a = 1,  b = 44, c = 43}
    tg[2]  = {a = 1,  b = 2,  c = 44}
    tg[3]  = {a = 2,  b = 5,  c = 4}
    tg[4]  = {a = 2,  b = 3,  c = 5}
    tg[5]  = {a = 7,  b = 40, c = 39}
    tg[6]  = {a = 7,  b = 8,  c = 40}
    tg[7]  = {a = 9,  b = 30, c = 29}
    tg[8]  = {a = 9,  b = 10, c = 30}
    tg[9]  = {a = 15, b = 31, c = 30}
    tg[10] = {a = 15, b = 17, c = 31}
    tg[11] = {a = 11, b = 14, c = 13}
    tg[12] = {a = 11, b = 12, c = 14}
    tg[13] = {a = 17, b = 22, c = 21}
    tg[14] = {a = 17, b = 19, c = 22}
    tg[15] = {a = 17, b = 20, c = 19}
    tg[16] = {a = 17, b = 18, c = 20}
    tg[17] = {a = 24, b = 25, c = 31}
    tg[18] = {a = 25, b = 27, c = 31}
    tg[19] = {a = 27, b = 28, c = 31}
    tg[20] = {a = 28, b = 32, c = 31}
    tg[21] = {a = 8,  b = 34, c = 33} --
    tg[22] = {a = 8,  b = 9,  c = 34} --
    tg[23] = {a = 29, b = 35, c = 34} --
    tg[24] = {a = 29, b = 32, c = 35} --
    tg[25] = {a = 36, b = 42, c = 41}
    tg[26] = {a = 36, b = 37, c = 42}
    tg[27] = {a = 25, b = 28, c = 27}
    tg[28] = {a = 25, b = 26, c = 28}
    tg[29] = {a = 21, b = 26, c = 24}
    tg[30] = {a = 21, b = 23, c = 26}
    tg[31] = {a = 19, b = 23, c = 22}
    tg[32] = {a = 19, b = 20, c = 23}
    tg[33]  = {a = 13, b = 18, c = 16}
    tg[34] = {a = 13, b = 14, c = 18}
    tg[35]  = {a = 10, b = 16, c = 15}
    tg[36]  = {a = 10, b = 11, c = 16}

    -- Triangles for Lines
    tl = {}

    tl[1]  = {a = 6,  b = 39, c = 38}
    tl[2]  = {a = 6,  b = 7,  c = 39}
    tl[3]  = {a = 4,  b = 12, c = 6}
    tl[4]  = {a = 4,  b = 5,  c = 12}
    tl[5]  = {a = 38, b = 45, c = 44}
    tl[6]  = {a = 38, b = 42, c = 45}
    --tl[7]  = {a = 8,  b = 34, c = 33} --
    --tl[8]  = {a = 8,  b = 9,  c = 34} --
    --tl[9]  = {a = 29, b = 35, c = 34} --
    --tl[10] = {a = 29, b = 32, c = 35} --
    
    
    
    
    

    -- Creation of a quarter of the central circle
    n_vertices_quarter = math.ceil(N_VERTICES_CIRCLE / 4) + 1 -- +1 because we want to have a point both at ~0 and pi/2

    -- Add points for the circles to the existing ones
    function circle_add_pts(radius)
      local center = pts[45]
      local alpha = math.atan((LINE_WIDTH / 2) / radius) -- first point must be on the inside side of the half line
      local alpha_increment = (math.pi / 2 - alpha) / (n_vertices_quarter - 1) -- number of parts is nb of vertices minus 1
      local Npts = table.maxn(pts)
      for i = 1, n_vertices_quarter do
        pts[Npts + i] = {
          x = center.x - radius * math.sin(alpha),
          y = center.y - radius * math.cos(alpha),
          z = center.z + 0
        }
        alpha = alpha + alpha_increment
      end
    end

    circle_add_pts(H / 2 - LINE_WIDTH) -- Inner radius of central circle
    circle_add_pts(H / 2) -- Outer radius of central circle

    --Add the triangles for the line of the central circle
    Npts = table.maxn(pts)
    cin_start = Npts - 2 * n_vertices_quarter -- id of the first point of the inner circle
    cout_start = Npts - n_vertices_quarter -- id of the first point of the outer circle
    Ntl = table.maxn(tl) -- number of triangles for lines
    for i = 1, (n_vertices_quarter - 1) do
      tl[Ntl + (2 * i - 1)] = {a = cout_start + (i + 1), b = cin_start + i, c = cout_start + i} --first part of one line rectangle
      tl[Ntl + (2 * i)] = {a = cout_start + (i + 1), b = cin_start + (i + 1), c = cin_start + i} --second part of one line rectangle
    end


    -- Internal triangles
    -- There is a vertex junction_index of the inner circle (cin) that makes the junction between triangles
    -- going through pt.41 (top vertex of central dash) and pt.36 (bottom vertex of central dash).
    -- It is located at approximately two thirds of the quarter
    junction_index = math.ceil((2 / 3) * n_vertices_quarter) -- index of the junction triangle within the inner circle
    Ntg = table.maxn(tg)
    for i = 1, (junction_index - 1) do
      tg[Ntg + i] = {a = cin_start + (i + 1), b = 41, c = cin_start + i}
    end
    tg[Ntg + junction_index] = {a = cin_start + junction_index, b = 36, c = 41} -- adds junction triangle
    for i = junction_index, (n_vertices_quarter - 1) do
      tg[Ntg + i + 1] = {a = cin_start + (i + 1), b = 36, c = cin_start + i}
    end
    tg[Ntg + n_vertices_quarter + 1] = {a = cin_start + n_vertices_quarter, b = 37, c = 36} -- adds touch line triangle (boundary with touch line)


    Npts = table.maxn(pts)
    cin_small_start = Npts - 2 * n_vertices_quarter
    cout_small_start = Npts - n_vertices_quarter

    circle_add_pts(L / 2 - LINE_WIDTH) -- Inner radius of central circle
    circle_add_pts(L / 2) -- Outer radius of central circle
    
    Npts = table.maxn(pts)
    cin_start = Npts - 2 * n_vertices_quarter
    cout_start = Npts - n_vertices_quarter
    
    -- Add the external triangles of the bigger circle
    Ntg = table.maxn(tg) -- number of triangles for grass already existing
    tg[Ntg + 1] = {a = 33, b = cout_start + 1, c = 40} -- adds first triangle (boundary with half line)
    Ntg = table.maxn(tg)
    for i = 1, (n_vertices_quarter - 1) do
      tg[Ntg + i] = {a = 33, b = cout_start + (i + 1), c = cout_start + i}
    end
    tg[Ntg + n_vertices_quarter] = {a = 33, b = 35, c = cout_start + n_vertices_quarter} -- adds last triangle (boundary with penalty area and touch line)
    
    -- Add the triangles in between of circles
    
    Ntg = table.maxn(tg) -- number of triangles for grass already existing
    for i = 1, (n_vertices_quarter - 1) do
      tg[Ntg + i] = {a = cin_start + i, b = cin_start + i + 1, c = cout_small_start + i}
    end
    Ntg = table.maxn(tg)
    for i = 1, (n_vertices_quarter - 1) do
      tg[Ntg + i] = {a = cout_small_start + i + 1, b = cout_small_start + i, c = cin_start + i + 1}
    end
   
    --Add the triangles for the line of the bigger circle
    Npts = table.maxn(pts)
    cin_start = Npts - 2 * n_vertices_quarter -- id of the first point of the inner circle
    cout_start = Npts - n_vertices_quarter -- id of the first point of the outer circle
    Ntl = table.maxn(tl) -- number of triangles for lines
    for i = 1, (n_vertices_quarter - 1) do
      tl[Ntl + (2 * i - 1)] = {a = cout_start + (i + 1), b = cin_start + i, c = cout_start + i} --first part of one line rectangle
      tl[Ntl + (2 * i)] = {a = cout_start + (i + 1), b = cin_start + (i + 1), c = cin_start + i} --second part of one line rectangle
    end



    -- Replication of the other 3 quarters
    Npts = table.maxn(pts)
    for i = 1, Npts do
      pt_ref = pts[i] -- reference point
      -- 2nd Quarter (which completes one team's half)
      pts[Npts + i] = {x = pt_ref.x, y = 2 * I + B - pt_ref.y, z = pt_ref.z}
      -- 3rd Quarter (replication on the y-axis)
      pts[2 * Npts + i] = {x = 2 * I + A - pt_ref.x, y = pt_ref.y, z = pt_ref.z}
      -- 4th Quarter (which completes opponent's half)
      pts[3 * Npts + i] = {x = 2 * I + A - pt_ref.x, y = 2 * I + B - pt_ref.y, z = pt_ref.z}
    end

    Ntg = table.maxn(tg)
    for i = 1, Ntg do -- Grass triangles
      tg_ref = tg[i]
      -- Due to axis reversions, we have to update the order of coords for the new corresp. triangles
      tg[Ntg + i] = {a = tg_ref.b + Npts, b = tg_ref.a + Npts, c = tg_ref.c + Npts} -- 2nd Quarter (bac)
      tg[2 * Ntg + i] = {a = tg_ref.c + 2 * Npts, b = tg_ref.b + 2 * Npts, c = tg_ref.a + 2 * Npts} -- 3rd Quarter (cba)
      tg[3 * Ntg + i] = {a = tg_ref.c + 3 * Npts, b = tg_ref.a + 3 * Npts, c = tg_ref.b + 3 * Npts} -- 3rd Quarter (cab)
    end

    Ntl = table.maxn(tl)
    for i = 1, Ntl do -- Same for the line triangles
      tl_ref = tl[i]
      tl[Ntl + i] = {a = tl_ref.b + Npts, b = tl_ref.a + Npts, c = tl_ref.c + Npts}
      tl[2 * Ntl + i] = {a = tl_ref.c + 2 * Npts, b = tl_ref.b + 2 * Npts, c = tl_ref.a + 2 * Npts}
      tl[3 * Ntl + i] = {a = tl_ref.c + 3 * Npts, b = tl_ref.a + 3 * Npts, c = tl_ref.b + 3 * Npts}
    end

    -- Offset to have origin on the center of the field
    OFFSET_X = (2 * I + A) / 2
    OFFSET_Y = (2 * I + B) / 2
    Npts = table.maxn(pts)
    for i = 1, Npts do
      pts[i].x = pts[i].x - OFFSET_X
      pts[i].y = pts[i].y - OFFSET_Y
    end

  }%

  Solid {
    translation IS translation
    rotation IS rotation
    locked TRUE
    children [
      %{ if fields.turfPhysics.value then }%
      DEF BLADES Solid {
        contactMaterial "grass"
        translation 0 0 0.01
        rotation 1 0 0 0
        boundingObject Plane {
          size %{= 2 * I + A }% %{= 2 * I + B }%
        }
      }
      %{ end }%
      DEF GRASS Shape {
        #appearance Grass {
        #  colorOverride 0.6 1 0.3
        #  type "artificial"
        #  textureTransform TextureTransform {
        #    scale %{= 2 * A }% %{= 2 * A }%
        #  }
        #}
        appearance DEF GREEN_APPEARANCE CarpetFibers {
          colorOverride    0 1 0
          type             "synthetic"
          textureTransform TextureTransform {
            scale %{= 2 * A }% %{= 2 * A }%
          }
          IBLStrength      1.0
        }        
        geometry IndexedFaceSet {
          coord Coordinate {
            point [
             %{ for k, v in pairs(pts) do }%
                %{= v.x }% %{= v.y }% %{= v.z }%
             %{ end }%
            ]
          }
          ccw FALSE
          coordIndex [ # v.X - 1 because coordIndex starts at 0, while the points (defined in Lua) start at 1
            %{ for k, v in pairs(tg) do }%
               %{= v.a - 1 }% %{= v.b - 1 }% %{= v.c - 1 }% -1,
            %{ end }%
          ]
        }
      }
      DEF LINES Shape {
        #appearance Grass {
        #  colorOverride 1 1 1
        #  type "artificial_white"
        #  IBLStrength 1.5
        #  textureTransform TextureTransform {
        #    scale %{= 2 * A }% %{= 2 * A }%
        #  }
        #}
        appearance DEF WHITE_APPEARANCE Plastic {
          colorOverride    1 1 1
        }        
        geometry IndexedFaceSet {
          coord Coordinate {
            point [
             %{ for k, v in pairs(pts) do }%
                %{= v.x }% %{= v.y }% %{= v.z }%
             %{ end }%
            ]
          }
          ccw FALSE
          coordIndex [ # v.X - 1 because coordIndex starts at 0, while the points (defined in Lua) start at 1
            %{ for k, v in pairs(tl) do }%
               %{= v.a - 1 }% %{= v.b - 1 }% %{= v.c - 1 }% -1
            %{ end }%
          ]
        }
      }
    ]
    boundingObject Transform {
      rotation 1 0 0 0
      children [
        Shape {
          geometry Plane {
            size %{= 2 * I + A }% %{= 2 * I + B }%
          }
        }
      ]
    }
  }
}