#VRML_SIM R2023b utf8
# license: Apache License 2.0
# license url: http://www.apache.org/licenses/LICENSE-2.0
# Field for Sprint competition.

EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/appearances/protos/Plastic.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/appearances/protos/Grass.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/appearances/protos/CarpetFibers.proto"

PROTO SprintField [
  field SFVec3f                     translation 0 0 0
  field SFRotation                  rotation    0 1 0 0
  field SFString                    name        "sprint_field" 
  field SFBool                      turfPhysics FALSE 
]
{

  %{

    LINE_WIDTH = 0.05 -- Line width
    distance_between_slices = 1.0
    A = 3.0
    B = 1.0
    C = 1.0
    D = 1.0
    I = 0


    if fields.turfPhysics.value then
      DEPTH = 0.01
    else
      DEPTH = 0
    end
    -- Points for a quarter field (except central circle)
    pts = {}

    -- Прямоугольник 1
    pts[1]  = {x = 0,                           y = 0,                                                  z = DEPTH}
    pts[2]  = {x = 0,                           y = B,                                                  z = DEPTH}
    pts[3]  = {x = A,                           y = 0,                                                  z = DEPTH}
    pts[4]  = {x = A,                           y = B,                                                  z = DEPTH}
    pts[5]  = {x = 0,                           y = -LINE_WIDTH,                                        z = DEPTH}
    pts[6]  = {x = A ,                          y = -LINE_WIDTH,                                        z = DEPTH}
    pts[7]  = {x = 0 ,                          y = B + LINE_WIDTH,                                     z = DEPTH}
    pts[8]  = {x = A ,                          y = B + LINE_WIDTH,                                     z = DEPTH}
    pts[9]  = {x = -LINE_WIDTH ,                y = B + LINE_WIDTH,                                     z = DEPTH}
    pts[10]  = {x = -LINE_WIDTH ,               y = -LINE_WIDTH,                                        z = DEPTH}
    pts[11]  = {x = A + LINE_WIDTH ,            y = B + LINE_WIDTH,                                     z = DEPTH}
    pts[12]  = {x = A + LINE_WIDTH,             y = -LINE_WIDTH,                                        z = DEPTH}
    pts[13]  = {x = -D - LINE_WIDTH,            y = -C-LINE_WIDTH,                                      z = DEPTH}
    pts[14]  = {x = - LINE_WIDTH,               y = -C -LINE_WIDTH,                                     z = DEPTH}
    pts[15]  = {x = -D - LINE_WIDTH,            y = C + B + LINE_WIDTH,                                 z = DEPTH}
    pts[16]  = {x = - LINE_WIDTH,               y = C + B + LINE_WIDTH,                                 z = DEPTH}
    pts[17]  = {x = A + LINE_WIDTH,             y = C+ B + LINE_WIDTH,                                  z = DEPTH}
    pts[18]  = {x = A + D + LINE_WIDTH,         y = C+ B + LINE_WIDTH,                                  z = DEPTH}
    pts[19]  = {x = A + LINE_WIDTH,             y = -C-LINE_WIDTH,                                      z = DEPTH}
    pts[20]  = {x = A + D + LINE_WIDTH,         y = -C-LINE_WIDTH,                                      z = DEPTH}

    -- Прямоугольник 2
    pts[21]  = {x = 0,                          y = B + C + LINE_WIDTH - distance_between_slices + 0,                             z = DEPTH}
    pts[22]  = {x = 0,                          y = B + C + LINE_WIDTH - distance_between_slices + B,                             z = DEPTH}
    pts[23]  = {x = A,                          y = B + C + LINE_WIDTH - distance_between_slices + 0,                             z = DEPTH}
    pts[24]  = {x = A,                          y = B + C + LINE_WIDTH - distance_between_slices + B,                             z = DEPTH}
    pts[25]  = {x = 0,                          y = B + C + LINE_WIDTH - distance_between_slices - LINE_WIDTH,                    z = DEPTH}
    pts[26]  = {x = A ,                         y = B + C + LINE_WIDTH - distance_between_slices - LINE_WIDTH,                    z = DEPTH}
    pts[27]  = {x = 0 ,                         y = B + C + LINE_WIDTH + B - distance_between_slices + LINE_WIDTH,                z = DEPTH}
    pts[28]  = {x = A ,                         y = B + C + LINE_WIDTH + B - distance_between_slices + LINE_WIDTH,                z = DEPTH}
    pts[29]  = {x = -LINE_WIDTH ,               y = B + C + LINE_WIDTH + B - distance_between_slices + LINE_WIDTH,                z = DEPTH}
    pts[30] = {x = -LINE_WIDTH ,                y = B + C + LINE_WIDTH - distance_between_slices - LINE_WIDTH,                    z = DEPTH}
    pts[31] = {x = A + LINE_WIDTH ,             y = B + C + LINE_WIDTH + B - distance_between_slices + LINE_WIDTH,                z = DEPTH}
    pts[32] = {x = A + LINE_WIDTH,              y = B + C + LINE_WIDTH - distance_between_slices - LINE_WIDTH,                    z = DEPTH}
    pts[33] = {x = -D - LINE_WIDTH,             y = B + C + LINE_WIDTH - C - distance_between_slices - LINE_WIDTH,                z = DEPTH}
    pts[34] = {x = - LINE_WIDTH,                y = B + C + LINE_WIDTH - C - distance_between_slices - LINE_WIDTH,                z = DEPTH}
    pts[35] = {x = -D - LINE_WIDTH,             y = B + C + LINE_WIDTH + C + B - distance_between_slices + LINE_WIDTH,            z = DEPTH}
    pts[36] = {x = - LINE_WIDTH,                y = B + C + LINE_WIDTH + C + B - distance_between_slices + LINE_WIDTH,            z = DEPTH}
    pts[37] = {x = A + LINE_WIDTH,              y = B + C + LINE_WIDTH + C+ B - distance_between_slices + LINE_WIDTH,             z = DEPTH}
    pts[38] = {x = A + D + LINE_WIDTH,          y = B + C + LINE_WIDTH + C+ B - distance_between_slices + LINE_WIDTH,             z = DEPTH}
    pts[39] = {x = A + LINE_WIDTH,              y = B + C + LINE_WIDTH - C- distance_between_slices -LINE_WIDTH,                  z = DEPTH}
    pts[40] = {x = A + D + LINE_WIDTH,          y = B + C + LINE_WIDTH - C- distance_between_slices -LINE_WIDTH,                  z = DEPTH}

    -- Прямоугольник 3
    pts[41]  = {x = 0,                          y = (B + C + LINE_WIDTH - distance_between_slices) * 2 + 0,                       z = DEPTH}
    pts[42]  = {x = 0,                          y = (B + C + LINE_WIDTH - distance_between_slices) * 2   + B,                       z = DEPTH}
    pts[43]  = {x = A,                          y = (B + C + LINE_WIDTH - distance_between_slices) * 2   + 0,                       z = DEPTH}
    pts[44]  = {x = A,                          y = (B + C + LINE_WIDTH - distance_between_slices) * 2   + B,                       z = DEPTH}
    pts[45]  = {x = 0,                          y = (B + C + LINE_WIDTH - distance_between_slices) * 2   - LINE_WIDTH,              z = DEPTH}
    pts[46]  = {x = A ,                         y = (B + C + LINE_WIDTH - distance_between_slices) * 2   - LINE_WIDTH,              z = DEPTH}
    pts[47]  = {x = 0 ,                         y = (B + C + LINE_WIDTH - distance_between_slices) * 2 + B   + LINE_WIDTH,          z = DEPTH}
    pts[48]  = {x = A ,                         y = (B + C + LINE_WIDTH - distance_between_slices) * 2 + B   + LINE_WIDTH,          z = DEPTH}
    pts[49]  = {x = -LINE_WIDTH ,               y = (B + C + LINE_WIDTH - distance_between_slices) * 2 + B   + LINE_WIDTH,          z = DEPTH}
    pts[50] = {x = -LINE_WIDTH ,                y = (B + C + LINE_WIDTH - distance_between_slices) * 2   - LINE_WIDTH,              z = DEPTH}
    pts[51] = {x = A + LINE_WIDTH ,             y = (B + C + LINE_WIDTH - distance_between_slices) * 2 + B   + LINE_WIDTH,          z = DEPTH}
    pts[52] = {x = A + LINE_WIDTH,              y = (B + C + LINE_WIDTH - distance_between_slices) * 2   - LINE_WIDTH,              z = DEPTH}
    pts[53] = {x = -D - LINE_WIDTH,             y = (B + C + LINE_WIDTH - distance_between_slices) * 2 - C  -LINE_WIDTH,            z = DEPTH}
    pts[54] = {x = - LINE_WIDTH,                y = (B + C + LINE_WIDTH - distance_between_slices) * 2 - C   -LINE_WIDTH,           z = DEPTH}
    pts[55] = {x = -D - LINE_WIDTH,             y = (B + C + LINE_WIDTH - distance_between_slices) * 2 + C + B   + LINE_WIDTH,      z = DEPTH}
    pts[56] = {x = - LINE_WIDTH,                y = (B + C + LINE_WIDTH - distance_between_slices) * 2 + C + B   + LINE_WIDTH,      z = DEPTH}
    pts[57] = {x = A + LINE_WIDTH,              y = (B + C + LINE_WIDTH - distance_between_slices) * 2 + C+ B   + LINE_WIDTH,       z = DEPTH}
    pts[58] = {x = A + D + LINE_WIDTH,          y = (B + C + LINE_WIDTH - distance_between_slices) * 2 + C+ B   + LINE_WIDTH,       z = DEPTH}
    pts[59] = {x = A + LINE_WIDTH,              y = (B + C + LINE_WIDTH - distance_between_slices) * 2 - C  -LINE_WIDTH,            z = DEPTH}
    pts[60] = {x = A + D + LINE_WIDTH,          y = (B + C + LINE_WIDTH - distance_between_slices) * 2 - C  -LINE_WIDTH,            z = DEPTH}

    -- Прямоугольник 4
    --pts[61]  = {x = 0,                          y = (B + C + LINE_WIDTH - distance_between_slices) * 3 + 0,                       z = DEPTH}
    --pts[62]  = {x = 0,                          y = (B + C + LINE_WIDTH - distance_between_slices) * 3   + B,                       z = DEPTH}
    --pts[63]  = {x = A,                          y = (B + C + LINE_WIDTH - distance_between_slices) * 3   + 0,                       z = DEPTH}
    --pts[64]  = {x = A,                          y = (B + C + LINE_WIDTH - distance_between_slices) * 3   + B,                       z = DEPTH}
    --pts[65]  = {x = 0,                          y = (B + C + LINE_WIDTH - distance_between_slices) * 3   - LINE_WIDTH,              z = DEPTH}
    --pts[66]  = {x = A ,                         y = (B + C + LINE_WIDTH - distance_between_slices) * 3   - LINE_WIDTH,              z = DEPTH}
    --pts[67]  = {x = 0 ,                         y = (B + C + LINE_WIDTH - distance_between_slices) * 3 + B   + LINE_WIDTH,          z = DEPTH}
    --pts[68]  = {x = A ,                         y = (B + C + LINE_WIDTH - distance_between_slices) * 3 + B   + LINE_WIDTH,          z = DEPTH}
    --pts[69]  = {x = -LINE_WIDTH ,               y = (B + C + LINE_WIDTH - distance_between_slices) * 3 + B   + LINE_WIDTH,          z = DEPTH}
    --pts[70] = {x = -LINE_WIDTH ,                y = (B + C + LINE_WIDTH - distance_between_slices) * 3   - LINE_WIDTH,              z = DEPTH}
    --pts[71] = {x = A + LINE_WIDTH ,             y = (B + C + LINE_WIDTH - distance_between_slices) * 3 + B   + LINE_WIDTH,          z = DEPTH}
    --pts[72] = {x = A + LINE_WIDTH,              y = (B + C + LINE_WIDTH - distance_between_slices) * 3   - LINE_WIDTH,              z = DEPTH}
    --pts[73] = {x = -D - LINE_WIDTH,             y = (B + C + LINE_WIDTH - distance_between_slices) * 3 - C  -LINE_WIDTH,            z = DEPTH}
    --pts[74] = {x = - LINE_WIDTH,                y = (B + C + LINE_WIDTH - distance_between_slices) * 3 - C   -LINE_WIDTH,           z = DEPTH}
    --pts[75] = {x = -D - LINE_WIDTH,             y = (B + C + LINE_WIDTH - distance_between_slices) * 3 + C + B   + LINE_WIDTH,      z = DEPTH}
    --pts[76] = {x = - LINE_WIDTH,                y = (B + C + LINE_WIDTH - distance_between_slices) * 3 + C + B   + LINE_WIDTH,      z = DEPTH}
    --pts[77] = {x = A + LINE_WIDTH,              y = (B + C + LINE_WIDTH - distance_between_slices) * 3 + C+ B   + LINE_WIDTH,       z = DEPTH}
    --pts[78] = {x = A + D + LINE_WIDTH,          y = (B + C + LINE_WIDTH - distance_between_slices) * 3 + C+ B   + LINE_WIDTH,       z = DEPTH}
    --pts[79] = {x = A + LINE_WIDTH,              y = (B + C + LINE_WIDTH - distance_between_slices) * 3 - C  -LINE_WIDTH,            z = DEPTH}
    --pts[80] = {x = A + D + LINE_WIDTH,          y = (B + C + LINE_WIDTH - distance_between_slices) * 3 - C  -LINE_WIDTH,            z = DEPTH}

    -- Triangles for a quarter field (except central circle)

    -- Triangles for Grass
    tg = {}

    tg[1]  = {a = 1,  b = 2, c = 4}
    tg[2]  = {a = 1,  b = 4,  c = 3}
    tg[3]  = {a = 16,  b = 13,  c = 15}
    tg[4]  = {a = 13,  b = 16,  c = 14}

    tg[5]  = {a = 21,  b = 22, c = 24}
    tg[6]  = {a = 21,  b = 24,  c = 23}
    tg[7]  = {a = 12,  b = 14, c = 10}
    tg[8]  = {a = 14,  b = 12, c = 19}
    tg[9]  = {a = 57, b = 20, c = 19}
    tg[10] = {a = 20, b = 57, c = 58}

    tg[21] = {a = 41,  b = 42, c = 44}
    tg[22] = {a = 41,  b = 44,  c = 43}
    tg[23] = {a = 56,  b = 15,  c = 55}
    tg[24] = {a = 15,  b = 56,  c = 16}
    tg[25] = {a = 57,  b = 49, c = 56}
    tg[26] = {a = 49,  b = 57,  c = 51}

    -- beetwen slices
    tg[27] = {a = 9, b = 30, c = 11}
    tg[28] = {a = 32, b = 11, c = 30}
    tg[29] = {a = 29, b = 50, c = 31}
    tg[30] = {a = 52, b = 31, c = 50}

    -- Triangles for Lines
    tl = {}
    -- Прямоугольник 1
    tl[1]  = {a = 1,  b = 3, c = 5}
    tl[2]  = {a = 5,  b = 3,  c = 6}
    tl[3]  = {a = 2,  b = 7, c = 8}
    tl[4]  = {a = 2,  b = 8,  c = 4}
    tl[5]  = {a = 5, b = 10, c = 9}
    tl[6]  = {a = 7, b = 5, c = 9}
    tl[7]  = {a = 8,  b = 12, c = 6}
    tl[8]  = {a = 12,  b = 8,  c = 11}

    -- Прямоугольник 2
    tl[9]  = {a = 21,  b = 23, c = 25}
    tl[10]  = {a = 25,  b = 23,  c = 26}
    tl[11]  = {a = 22,  b = 27, c = 28}
    tl[12]  = {a = 22,  b = 28,  c = 24}
    tl[13]  = {a = 25, b = 30, c = 29}
    tl[14]  = {a = 27, b = 25, c = 29}
    tl[15]  = {a = 28,  b = 32, c = 26}
    tl[16]  = {a = 32,  b = 28,  c = 31}

    -- Прямоугольник 3
    tl[17]  = {a = 41,  b = 43, c = 45}
    tl[18]  = {a = 45,  b = 43,  c = 46}
    tl[19]  = {a = 42,  b = 47, c = 48}
    tl[20]  = {a = 42,  b = 48,  c = 44}
    tl[21]  = {a = 45, b = 50, c = 49}
    tl[22]  = {a = 47, b = 45, c = 49}
    tl[23]  = {a = 48,  b = 52, c = 46}
    tl[24]  = {a = 52,  b = 48,  c = 51}

    -- Прямоугольник 4
    --tl[25]  = {a = 61,  b = 63, c = 65}
    --tl[26]  = {a = 65,  b = 63,  c = 66}
    --tl[27]  = {a = 62,  b = 67, c = 68}
    --tl[28]  = {a = 62,  b = 68,  c = 64}
    --tl[29]  = {a = 65, b = 70, c = 69}
    --tl[30]  = {a = 67, b = 65, c = 69}
    --tl[31]  = {a = 68,  b = 72, c = 66}
    --tl[32]  = {a = 72,  b = 68,  c = 71}

    -- Offset to have origin on the center of the field
    OFFSET_X = 0
    OFFSET_Y = (B) / 2
    Npts = table.maxn(pts)
    for i = 1, Npts do
      pts[i].x = pts[i].x - OFFSET_X
      pts[i].y = pts[i].y - OFFSET_Y
    end

  }%

  Solid {
    translation IS translation
    rotation IS rotation
    locked TRUE
    children [
      %{ if fields.turfPhysics.value then }%
      DEF BLADES Solid {
        contactMaterial "grass"
        translation 0 0 0.01
        rotation 1 0 0 0
        boundingObject Plane {
          size %{= 2 * I + A }% %{= 2 * I + B }%
        }
      }
      %{ end }%
      DEF GRASS Shape {
        #appearance Grass {
        #  colorOverride 0.6 1 0.3
        #  type "artificial"
        #  textureTransform TextureTransform {
        #    scale %{= 2 * A }% %{= 2 * A }%
        #  }
        #}
        appearance DEF GREEN_APPEARANCE CarpetFibers {
          colorOverride    0 1 0
          type             "synthetic"
          textureTransform TextureTransform {
            scale %{= 2 * A }% %{= 2 * A }%
          }
          IBLStrength      1.0
        }        
        geometry IndexedFaceSet {
          coord Coordinate {
            point [
             %{ for k, v in pairs(pts) do }%
                %{= v.x }% %{= v.y }% %{= v.z }%
             %{ end }%
            ]
          }
          ccw FALSE
          coordIndex [ # v.X - 1 because coordIndex starts at 0, while the points (defined in Lua) start at 1
            %{ for k, v in pairs(tg) do }%
               %{= v.a - 1 }% %{= v.b - 1 }% %{= v.c - 1 }% -1,
            %{ end }%
          ]
        }
      }
      DEF LINES Shape {
        #appearance Grass {
        #  colorOverride 1 1 1
        #  type "artificial_white"
        #  IBLStrength 1.5
        #  textureTransform TextureTransform {
        #    scale %{= 2 * A }% %{= 2 * A }%
        #  }
        #}
        appearance DEF WHITE_APPEARANCE Plastic {
          colorOverride    1 1 1
        }        
        geometry IndexedFaceSet {
          coord Coordinate {
            point [
             %{ for k, v in pairs(pts) do }%
                %{= v.x }% %{= v.y }% %{= v.z }%
             %{ end }%
            ]
          }
          ccw FALSE
          coordIndex [ # v.X - 1 because coordIndex starts at 0, while the points (defined in Lua) start at 1
            %{ for k, v in pairs(tl) do }%
               %{= v.a - 1 }% %{= v.b - 1 }% %{= v.c - 1 }% -1
            %{ end }%
          ]
        }
      }
    ]
    boundingObject Transform {
      rotation 1 0 0 0
      translation 1 0 0
      children [
        Shape {
          geometry Plane {
            size %{= 2 * (A + 2 * C) }% %{= 2 * (A + 2 * C) }%
          }
        }
      ]
    }
  }
}